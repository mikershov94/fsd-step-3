КЛАССЫ

В ООП класс - это расширяемый шаблон, по которому создаются однотипные объекты.

Объект можно создать с помощью конструктора - let user = new User('Вася');
Но можно использовать более продвинутую конструкцию - класс.

Синтаксис:
    class User {                //описание класса
        constructor() { ... }   //метод-конструктор запускается автоматически при вызове класса
        method1() { ... }
        method2() { ... }
        method3() { ... }
        method4() { ... }
        ...
    }

    let user = new User();      //вызов класса, создание объекта

Пример.
    class User {
        
        constructor(name) {
            this.name = name;
        }

        sayHi() {
            console.log(`Привет, я ${this.name}`);
        }

    }

    let user = new User('Вася');    //создание объекта
    user.sayHi()            //Привет, я Вася

Что происходит при вызове?
    - создается новый объект
    - конструктор запускается с переданным аргументом и передает его в this.name

В JavaScript класс - это разновидность функций.
На самом деле класс-функция делает:
    - создает функцию конструктор, которая является результатом выполнения класса
        (класс возвращает конструктор)
        код конструктора берется из метода constructor
        если метод не определен - то возвращается пустая функция
    - все методы сохраняются в свойстве возвращенной функции .prototype

Стоит отметить что класс - это не просто синтаксический сахар.
    Конструкцию можно переписать как:
        function User(name) {
            this.name = name;
        }

        User.prototype.sayHi = function() {
            console.log(`Привет, я ${this.name}`)
        }

    НО! Конструкция class добавляет:
        - свойство [[FunctionKind]]:"classConstructor" (конструктор класса не может быть вызван без new)
        - строковое представление конструктора класса - 'class User {}'
        - все методы класса имеют флаг enumerable: false
        - класс всегда использует use strict

Поддерживается Class Expression
    let User = class {
        ...
    }

Объявление геттеров и сеттеров.
    - можно описать при объявлении класса
        class User {

            constructor(name) {
                // вызывает сеттер
                this.name = name;
            }

            get name() {
                return this._name;
            }

            set name(value) {
                if (value.length < 4) {
                alert("Имя слишком короткое.");
                return;
                }
                this._name = value;
            }

        }

    - можно добавлять в последующем коде

        Object.defineProperty(User.prototype, {
            name: {
                get() {
                    return this._name;
                }
                set(name) {
                    ...
                }
            }
        })

Свойства объектов
    Определяются в конструкторе.
    Но в новых версиях браузеров возможно определение в теле класса
    class User {
        name = "Аноним";

        sayHi() {
            alert(`Привет, ${this.name}!`);
        }
    }
