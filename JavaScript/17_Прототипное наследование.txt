ПРОТОТИПНОЕ НАСЛЕДОВАНИЕ

Прототипное наследование - возможность языка, позволяющая унаследовать объектом
    методы и свойства другого объекта-прототипа.

        let animal = {
            eats: true
        };
            ||
            ||      rabbit прототипно наследует свойства animal
            \/
        let rabbit = {
            jumps: true
        };

    rabbit.__proto__ = animal;

    При прототипном наследовании свойства и методы объекта прототипа
        доступны в объектк наследнике как собственные.

    Каждый объект содержит свойство [[Prototype]]
    Она ссылается на объект прототип, либо равна null

1. Свойство __proto__

    __proto__ - это геттер/сеттер для [[Prototype]]
    Данное свойство существует исторически.
    В современном виде это:
        - Object.getPrototypeOf()       //геттер
        - Object.setPrototypeOf()       //сеттер

        let animal = {                                                  animal
            eats: true                                                 | eats: true |
        };                                                                  ^
        let rabbit = {                                                      |   [[Prototype]]
            jumps: true                                                 rabbit
        };                                                             | jumps: true |

        rabbit.__proto__ = animal;  //задаем прототип для rabbit

        // теперь мы можем найти оба свойства в rabbit:
        alert( rabbit.eats ); // true (**)
        alert( rabbit.jumps ); // true

    Свойство eats у rabbit называется УНАСЛЕДОВАННЫМ

    Прототип используется ТОЛЬКО для чтения свойств и методов.
    При попытке записи свойств и методов, они будут записаны в сам объект (не в прототип)
    При этом свойства-акссесоры - исключения. Так как булет срабатывать сеттер.

    Ограничения:
    - Ссылки не могут идти по кругу. JavaScript выдаст ошибку, если мы попытаемся назначить __proto__ по кругу.
    - Значение __proto__ может быть объектом или null. Другие типы игнорируются.

2. Значение this.

    При вызове метода или чтении свойства,
        которые являются унаследованными, this будет иметь значение наследника
        (this - объект перед точкой)

3. Цикл for ... of

    - Цикл будет проходить по локальным и уналедованным свойствам.
    - Цикл игнорирует свойства с enumerable: false

    -- obj.hasOwnProperty(key) возвращает true, если у obj есть собственное неунаследованное свойство key

        такой метод (как и многие другие) наследуются от Object.prototype
            это глобальный объект
            его свойства и методы enumerable: false

    null
        ^
        |
        |
    Object.prototype
    | toString: function       |
    | hasOwnProperty: function |
        ^
        |
        |
    animal
    | eats: true    |
        ^
        |
        |
    rabbit
    | jumps: true   |

4. Свойство .prototype

    Объекты могут быть созданы функцией-конструктором new F()
    Как известно функция относится к типу данных - объект.

    У функции конструктора существует свойство F.prototype.
        Оно принимает значения:
        - объект (ссылка на прототип)
            в этом случае в [[Prototype]] нового объекта
            запишется ссылка на объект, указанный в F.prototype

        - объект с единственным свойством { constructor: ... } (по умолчанию, но можно изменять)
            в этом случае конструктор ссылается как бы сам на себя
            и создает объект с именем указанным в свойстве constructor
            [[Prototype]] будет ссылаться на свойство constructor 
                (будем знать каким конструктором был создан объект)

    Таким образом, имея в свойстве объекта .prototype информацию о конструкторе,
        можно проследить цепочку наследования.
    То есть, объектом какого конструктора является экземпляр, и от каких объектов был унаследован (и так далее)

4. Примитивы

    Методы и свойства примитивов наследуются из прототипов:
    - String.prototype
    - Number.prototype
    - Boolean.prototype

    Уточняя определение прототипа.
    Прототип - объект, от которого наследуют свойства и методы другие объект
                и хранящийся в свойствах конструкторов как F.prototype

5. Изменение прототипов

    Прототипы можно изменять.
    К примеру если добавить метод строкам:
        String.prototype.show = function() {
            alert(this);
        };

        "BOOM!".show(); // BOOM!

    Он станет доступе всем строкам. Но это плохая практика!

6. Заимствования методов

    Очень гибкая возможность языка JavaScript.
    С помощью прототипа можно скопировать метод объекту от другого объекта.
    К примеру тот же случай с массивом.
        let obj = {
            0: 'Hello',
            1: 'World',
            length: 2,
        };

        obj.join = Array.prototype.join

        alert( obj.join(',') ); // Hello,world!