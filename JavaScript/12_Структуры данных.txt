СТРУКТУРЫ ДАННЫХ

В JavaScript существуют следующие структуры даннных
    - массивы (хранение упорядоченных коллекций)
    - объекты (хранение именованных коллекций)
    - map (объект, ключ может быть любым типом данных)
    - set (коллекция без ключей, множество, каждое значение появляется только 1 раз)
    - weakmap (в качестве ключей только объекты, удаляются при удалении объекта извне)
    - weakset (добавляются только объекты, удаляются из set при удалении извне)

Работа с MAP

    Методы и свойства:
        - new Map() – создаёт коллекцию.
        - map.set(key, value) – записывает по ключу key значение value.
        - map.get(key) – возвращает значение по ключу или undefined, если ключ key отсутствует.
        - map.has(key) – возвращает true, если ключ key присутствует в коллекции, иначе false.
        - map.delete(key) – удаляет элемент по ключу key.
        - map.clear() – очищает коллекцию от всех элементов.
        - map.size – возвращает текущее количество элементов.

    В качестве ключа Map может использовать объекты!
    В аналогию можно привести таблицу, которая хранится в памяти.

    Перебор Map.
        - map.keys() – возвращает итерируемый объект по ключам,
        - map.values() – возвращает итерируемый объект по значениям,
        - map.entries() – возвращает итерируемый объект по парам вида [ключ, значение],
                            этот вариант используется по умолчанию в for..of.
        - map.forEach((value, key, map) => { ... })

        Пример.
            let recipeMap = new Map([
                ["огурец", 500],
                ["помидор", 350],
                ["лук",    50]
            ]);

            // перебор по ключам (овощи)
            for (let vegetable of recipeMap.keys()) {
                alert(vegetable); // огурец, помидор, лук
            }

            // перебор по значениям (числа)
            for (let amount of recipeMap.values()) {
                alert(amount); // 500, 350, 50
            }

            // перебор по элементам в формате [ключ, значение]
            for (let entry of recipeMap) { // то же самое, что и recipeMap.entries()
                alert(entry); // огурец,500 (и так далее)
            }

    Создание Map.
        При создании Map мы можем указать массив пар "ключ-значение"

            let map = new Map([
                ['1', 'str1'],
                [1, 'num1'],
                [true, 'bool1]
            ]);

            console.log('1'); // str1

        Метод Object.entries(obj).
        Если у нас уже есть обычный объект, и мы хотели бы создать Map из него, 
            то поможет встроенный метод Object.entries(obj), 
            который получает объект и возвращает массив пар ключ-значение для него, 
            как раз в этом формате.

            let obj = {
                name: 'John',
                age: 30,
            };

            let map = new Map(Object.entries(obj));

        Метод возвращает массив пар "ключ-значение"
            [
                ['name', 'John'],
                ['age', 30]
            ]

        Метод Object.fromEntries(map).
        Метод делает противоположное. Из массива пар "ключ-значение"
            возвращает объект.

Работа с Set.

    Методы и свойства:
        new Set(iterable) – создаёт Set, и если в качестве аргумента был предоставлен
                             итерируемый объект (обычно это массив), то копирует его значения в
                             новый Set.
        set.add(value) – добавляет значение (если оно уже есть, то ничего не делает), 
                            возвращает тот же объект set.
        set.delete(value) – удаляет значение, возвращает true
                             если value было в множестве на момент вызова, иначе false.
        set.has(value) – возвращает true, если значение присутствует в множестве, иначе false.
        set.clear() – удаляет все имеющиеся значения.
        set.size – возвращает количество элементов в множестве.

        Основная «изюминка» – это то, что при повторных вызовах set.add()
                                 с одним и тем же значением ничего не происходит, 
                                 за счёт этого как раз и получается, что каждое значение
                                  появляется один раз.

    Перебор Set.

        - for ... of

        - set.forEach((value, valueAgain, set) => { ... })

        - set.keys() – возвращает перебираемый объект для значений,
        - set.values() – то же самое, что и set.keys(), 
                        присутствует для обратной совместимости с Map,
        - set.entries() – возвращает перебираемый объект для пар вида [значение, значение], 
                            присутствует для обратной совместимости с Map.

Перебор кастомных структур данных.

    Методы:
        - Object.keys(obj)      возвращает массив ключей
        - Object.values(obj)    возвращает массив значений
        - Object.entries(obj)   возвращает массив пар
