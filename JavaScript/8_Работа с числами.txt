ЧИСЛА

1. Укороченная запись числа
    
    1.1 Используем оператор e

        let billion = 1000000000  <==> let billion = 1e9
        let billion = 7300000000  <==> let billion = 7.3e9

        let ms = 0.000001   <==>    let ms = 1e-6

    1.2 Запись чисел в разных системах счисления

        let a = 255             //десятичная форма
        let a = 0xFF или 0xff   //шестнадцатиричная форма в 2х вариантах
        let a = 0o377           //восмеричная форма
        let a = 0b11111111      //двоичная форма

2. Строковое представление числа

    Используется функция toString(base),
        где base - система счисления
    
    Функция не изменяет само число, а только временно создает объект-обертку.

        let num = 255

        console.log(num.toString(16));  //ff
        console.log(num.toString(2));   //11111111

    base варьируется от 2 до 36 (по-умолчанию 10)

3. Округление

    В JavaScript для работы с округлением использются встроенные функции (из библиотеки Math)

    Math.floor() - округление в меньшую сторону

    Math.ceil() - округление в большую сторону

    Math.round() - округление до ближайшего целого

    Math.trunc() - удаление дробной части (не поддерживаетя в IE)

    Метод .toFixed(n) - округляет до n знаков в дробной части
        Возвращает СТРОКУ

4. Потеря точночности (!!!!)

    В JavaScript числа представлены в 64-битном формате по стандарту IEEE-754
    - 52 бит для хранения цифр
    - 11 бит для хранения положения десятичной точки
    - 1 бит для хранения знака

    Если число слишком большое, оно переполнит 64-битное хранилище.
    В этом случае JavaScript вернет бесконечность

        console.log(1e500) //Infinity

    Но наиболее частая ошибка это ПОТЕРЯ точночности

        console.log(0.1 + 0.2 == 0.3) //false

    Десятичная дробь представляется в виде бесконечной дроби и в этом случае
        выглядит так - 0.30000000000000004
    Это может приводить к катастрофическим последствиям.

    Для решения проблемы рекомендуется использовать метод .toFixed(),
        чтобы округлять дробь до меньшего количества знаков после точки

5. Проверка isFinite, isNaN

    К типу данных number относятся специальные значения:
        - Infinity (-Infinity)
            специальное значение, которое ведет себя как бесконечность
        - NaN
            представляет ошибку (в типе данных number)

    Существуют функции для проверки числа на данные значения

        isNaN(value) - преобразует value в число и проверяет, является ли оно NaN.

            console.log(isNaN(NaN))     //true
            console.log(isNaN('str'))   //true
            console.log(isNaN(58))      //false

        isFinite(value) - преобразует аргумент в число и возвращает true,
                            если оно является обычным числом
                            (не NaN/Infinity/-Infinity)

        !! Пустая строка интерпретируется как 0 во всех числовых значениях !!

6. Преобразование в число

    - + или Number() преобразуют строку в число.
        Если строка содержит символы-нечисла - вернет NaN

    - parseInt() преобразует строку с единицами измерения в целое число
        Неявный второй аргумент указывает систему счисления

    - parseFloat() преобразует строку с единицами измерения в дробное число

7. Генератор случайных чисел

    Math.random() - возвращает псевдослучайное число
                        в диапазоне от 0 до 1 (не включая)


8. Максимальное или минимальное число

    Math.max(a, b, c ,d, ...) - возвращает максимальное число из переданных

    Math.min(a, b, c, d, ...) - возвращает минимальное число из переданных

9. Возведение в степень

    Math.pow(n, power) - возвращает n, возведенное в степень power


В объектк Math есть множество других математических функций